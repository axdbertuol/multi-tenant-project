"""update_models_after_iam_merge

Revision ID: ef1b72b2daf8
Revises: 360c80c57912
Create Date: 2025-07-01 20:52:25.721229

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ef1b72b2daf8'
down_revision = '360c80c57912'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authorization_permissions',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('action', sa.Enum('CREATE', 'READ', 'UPDATE', 'DELETE', 'EXECUTE', 'MANAGE', name='permissionactionenum'), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_system_permission', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'resource_type'),
    schema='contas'
    )
    op.create_index(op.f('ix_contas_authorization_permissions_action'), 'authorization_permissions', ['action'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_authorization_permissions_name'), 'authorization_permissions', ['name'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_authorization_permissions_resource_type'), 'authorization_permissions', ['resource_type'], unique=False, schema='contas')
    op.create_table('plans',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('plan_type', sa.Enum('BASIC', 'PREMIUM', 'ENTERPRISE', name='plantypeenum'), nullable=False),
    sa.Column('resources', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('price_monthly', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('price_yearly', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('features', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('limits', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='contas'
    )
    op.create_index(op.f('ix_contas_plans_name'), 'plans', ['name'], unique=True, schema='contas')
    op.create_index(op.f('ix_contas_plans_plan_type'), 'plans', ['plan_type'], unique=False, schema='contas')
    op.create_table('plan_resources',
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('resource_type', sa.Enum('CHAT_WHATSAPP', 'CHAT_IFRAME', name='planresourcetypeenum'), nullable=False),
    sa.Column('configuration', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('limits', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['contas.plans.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('plan_id', 'resource_type', name='uq_plan_resource_type'),
    schema='contas'
    )
    op.create_index(op.f('ix_contas_plan_resources_plan_id'), 'plan_resources', ['plan_id'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_plan_resources_resource_type'), 'plan_resources', ['resource_type'], unique=False, schema='contas')
    op.create_table('authorization_policies',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('effect', sa.Enum('ALLOW', 'DENY', name='policyeffectenum'), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('conditions', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['contas.users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['contas.organizations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='contas'
    )
    op.create_index(op.f('ix_contas_authorization_policies_action'), 'authorization_policies', ['action'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_authorization_policies_effect'), 'authorization_policies', ['effect'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_authorization_policies_name'), 'authorization_policies', ['name'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_authorization_policies_organization_id'), 'authorization_policies', ['organization_id'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_authorization_policies_resource_type'), 'authorization_policies', ['resource_type'], unique=False, schema='contas')
    op.create_index('ix_policy_lookup', 'authorization_policies', ['resource_type', 'action', 'organization_id'], unique=False, schema='contas')
    op.create_table('authorization_resources',
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=True),
    sa.Column('attributes', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['contas.organizations.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['contas.users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('resource_type', 'resource_id'),
    schema='contas'
    )
    op.create_index(op.f('ix_contas_authorization_resources_organization_id'), 'authorization_resources', ['organization_id'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_authorization_resources_owner_id'), 'authorization_resources', ['owner_id'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_authorization_resources_resource_id'), 'authorization_resources', ['resource_id'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_authorization_resources_resource_type'), 'authorization_resources', ['resource_type'], unique=False, schema='contas')
    op.create_table('authorization_roles',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=True),
    sa.Column('parent_role_id', sa.UUID(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_system_role', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['contas.users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['contas.organizations.id'], ),
    sa.ForeignKeyConstraint(['parent_role_id'], ['contas.authorization_roles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'organization_id'),
    schema='contas'
    )
    op.create_index(op.f('ix_contas_authorization_roles_name'), 'authorization_roles', ['name'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_authorization_roles_organization_id'), 'authorization_roles', ['organization_id'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_authorization_roles_parent_role_id'), 'authorization_roles', ['parent_role_id'], unique=False, schema='contas')
    op.create_table('feature_usage',
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('feature_name', sa.String(length=100), nullable=False),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('usage_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('usage_details', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('cost', sa.Numeric(precision=10, scale=4), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['contas.organizations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='contas'
    )
    op.create_index(op.f('ix_contas_feature_usage_feature_name'), 'feature_usage', ['feature_name'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_feature_usage_organization_id'), 'feature_usage', ['organization_id'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_feature_usage_resource_type'), 'feature_usage', ['resource_type'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_feature_usage_usage_date'), 'feature_usage', ['usage_date'], unique=False, schema='contas')
    op.create_index('ix_usage_lookup', 'feature_usage', ['organization_id', 'resource_type', 'usage_date'], unique=False, schema='contas')
    op.create_table('plan_configurations',
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('configuration_data', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('api_keys', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('limits', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['contas.organizations.id'], ),
    sa.ForeignKeyConstraint(['plan_id'], ['contas.plans.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('plan_id', 'organization_id', name='uq_plan_organization_type'),
    schema='contas'
    )
    op.create_index(op.f('ix_contas_plan_configurations_organization_id'), 'plan_configurations', ['organization_id'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_plan_configurations_plan_id'), 'plan_configurations', ['plan_id'], unique=False, schema='contas')
    op.create_table('subscriptions',
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', 'CANCELLED', 'EXPIRED', 'TRIAL', 'SUSPENDED', name='subscriptionstatusenum'), nullable=False),
    sa.Column('billing_cycle', sa.Enum('MONTHLY', 'YEARLY', 'QUARTERLY', 'WEEKLY', name='billingcycleenum'), nullable=False),
    sa.Column('starts_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('ends_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('next_billing_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('subscription_metadata', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['contas.organizations.id'], ),
    sa.ForeignKeyConstraint(['plan_id'], ['contas.plans.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='contas'
    )
    op.create_index(op.f('ix_contas_subscriptions_billing_cycle'), 'subscriptions', ['billing_cycle'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_subscriptions_organization_id'), 'subscriptions', ['organization_id'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_subscriptions_plan_id'), 'subscriptions', ['plan_id'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_subscriptions_starts_at'), 'subscriptions', ['starts_at'], unique=False, schema='contas')
    op.create_index(op.f('ix_contas_subscriptions_status'), 'subscriptions', ['status'], unique=False, schema='contas')
    op.create_table('user_role_assignments',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=True),
    sa.Column('assigned_by', sa.UUID(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['assigned_by'], ['contas.users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['contas.organizations.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['contas.authorization_roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['contas.users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id'),
    schema='contas'
    )
    
    # Drop foreign key constraints first before dropping tables
    op.drop_constraint(op.f('role_permissions_role_id_fkey'), 'role_permissions', type_='foreignkey')
    op.drop_constraint(op.f('role_permissions_permission_id_fkey'), 'role_permissions', type_='foreignkey')
    op.drop_constraint(op.f('user_organization_roles_role_id_fkey'), 'user_organization_roles', type_='foreignkey')
    
    # Now drop tables
    op.drop_table('user_organizations')
    op.drop_index(op.f('ix_contas_roles_name'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_contas_permissions_action'), table_name='permissions')
    op.drop_index(op.f('ix_contas_permissions_name'), table_name='permissions')
    op.drop_index(op.f('ix_contas_permissions_resource'), table_name='permissions')
    op.drop_table('permissions')
    op.add_column('organizations', sa.Column('settings', postgresql.JSON(astext_type=sa.Text()), nullable=False))
    op.add_column('organizations', sa.Column('member_count', sa.Integer(), nullable=False))
    op.add_column('organizations', sa.Column('max_members', sa.Integer(), nullable=True))
    op.alter_column('organizations', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('organizations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('organizations_owner_id_fkey'), 'organizations', type_='foreignkey')
    op.create_foreign_key(None, 'organizations', 'users', ['owner_id'], ['id'], source_schema='contas', referent_schema='contas')
    op.alter_column('role_permissions', 'assigned_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    # Foreign key constraints already dropped above
    op.create_foreign_key(None, 'role_permissions', 'authorization_permissions', ['permission_id'], ['id'], source_schema='contas', referent_schema='contas')
    op.create_foreign_key(None, 'role_permissions', 'authorization_roles', ['role_id'], ['id'], source_schema='contas', referent_schema='contas')
    op.add_column('user_organization_roles', sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('user_organization_roles', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('user_organization_roles', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('user_organization_roles', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    # Drop remaining foreign key constraints (role_id constraint already dropped above)
    op.drop_constraint(op.f('user_organization_roles_assigned_by_fkey'), 'user_organization_roles', type_='foreignkey')
    op.drop_constraint(op.f('user_organization_roles_user_id_fkey'), 'user_organization_roles', type_='foreignkey')
    op.drop_constraint(op.f('user_organization_roles_organization_id_fkey'), 'user_organization_roles', type_='foreignkey')
    op.drop_constraint(op.f('user_organization_roles_revoked_by_fkey'), 'user_organization_roles', type_='foreignkey')
    op.create_foreign_key(None, 'user_organization_roles', 'users', ['user_id'], ['id'], source_schema='contas', referent_schema='contas')
    op.create_foreign_key(None, 'user_organization_roles', 'authorization_roles', ['role_id'], ['id'], source_schema='contas', referent_schema='contas')
    op.create_foreign_key(None, 'user_organization_roles', 'organizations', ['organization_id'], ['id'], source_schema='contas', referent_schema='contas')
    op.create_foreign_key(None, 'user_organization_roles', 'users', ['revoked_by'], ['id'], source_schema='contas', referent_schema='contas')
    op.create_foreign_key(None, 'user_organization_roles', 'users', ['assigned_by'], ['id'], source_schema='contas', referent_schema='contas')
    op.add_column('user_sessions', sa.Column('last_activity_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('user_sessions', sa.Column('_metadata', sa.Text(), nullable=True))
    op.alter_column('user_sessions', 'user_agent',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('user_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('user_sessions_user_id_fkey'), 'user_sessions', type_='foreignkey')
    op.create_foreign_key(None, 'user_sessions', 'users', ['user_id'], ['id'], source_schema='contas', referent_schema='contas')
    op.drop_column('user_sessions', 'login_at')
    # Add password_hash column with default value for existing users
    op.add_column('users', sa.Column('password_hash', sa.String(length=255), nullable=True))
    op.execute("UPDATE contas.users SET password_hash = '' WHERE password_hash IS NULL")
    op.alter_column('users', 'password_hash', nullable=False)
    
    # Add is_verified column with default value for existing users  
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.execute("UPDATE contas.users SET is_verified = false WHERE is_verified IS NULL")
    op.alter_column('users', 'is_verified', nullable=False)
    op.add_column('users', sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('users', 'password')
    op.drop_column('users', 'cpf')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('cpf', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.drop_column('users', 'last_login_at')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'password_hash')
    op.add_column('user_sessions', sa.Column('login_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_sessions', schema='contas', type_='foreignkey')
    op.create_foreign_key(op.f('user_sessions_user_id_fkey'), 'user_sessions', 'users', ['user_id'], ['id'])
    op.alter_column('user_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('user_sessions', 'user_agent',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.drop_column('user_sessions', '_metadata')
    op.drop_column('user_sessions', 'last_activity_at')
    op.drop_constraint(None, 'user_organization_roles', schema='contas', type_='foreignkey')
    op.drop_constraint(None, 'user_organization_roles', schema='contas', type_='foreignkey')
    op.drop_constraint(None, 'user_organization_roles', schema='contas', type_='foreignkey')
    op.drop_constraint(None, 'user_organization_roles', schema='contas', type_='foreignkey')
    op.drop_constraint(None, 'user_organization_roles', schema='contas', type_='foreignkey')
    op.create_foreign_key(op.f('user_organization_roles_revoked_by_fkey'), 'user_organization_roles', 'users', ['revoked_by'], ['id'])
    op.create_foreign_key(op.f('user_organization_roles_organization_id_fkey'), 'user_organization_roles', 'organizations', ['organization_id'], ['id'])
    op.create_foreign_key(op.f('user_organization_roles_user_id_fkey'), 'user_organization_roles', 'users', ['user_id'], ['id'])
    op.create_foreign_key(op.f('user_organization_roles_assigned_by_fkey'), 'user_organization_roles', 'users', ['assigned_by'], ['id'])
    op.create_foreign_key(op.f('user_organization_roles_role_id_fkey'), 'user_organization_roles', 'roles', ['role_id'], ['id'])
    op.alter_column('user_organization_roles', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_column('user_organization_roles', 'updated_at')
    op.drop_column('user_organization_roles', 'created_at')
    op.drop_column('user_organization_roles', 'expires_at')
    op.drop_constraint(None, 'role_permissions', schema='contas', type_='foreignkey')
    op.drop_constraint(None, 'role_permissions', schema='contas', type_='foreignkey')
    op.create_foreign_key(op.f('role_permissions_permission_id_fkey'), 'role_permissions', 'permissions', ['permission_id'], ['id'])
    op.create_foreign_key(op.f('role_permissions_role_id_fkey'), 'role_permissions', 'roles', ['role_id'], ['id'])
    op.alter_column('role_permissions', 'assigned_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'organizations', schema='contas', type_='foreignkey')
    op.create_foreign_key(op.f('organizations_owner_id_fkey'), 'organizations', 'users', ['owner_id'], ['id'])
    op.alter_column('organizations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('organizations', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_column('organizations', 'max_members')
    op.drop_column('organizations', 'member_count')
    op.drop_column('organizations', 'settings')
    op.create_table('permissions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resource', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('permissions_pkey'))
    )
    op.create_index(op.f('ix_contas_permissions_resource'), 'permissions', ['resource'], unique=False)
    op.create_index(op.f('ix_contas_permissions_name'), 'permissions', ['name'], unique=True)
    op.create_index(op.f('ix_contas_permissions_action'), 'permissions', ['action'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_system', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('roles_pkey'))
    )
    op.create_index(op.f('ix_contas_roles_name'), 'roles', ['name'], unique=True)
    op.create_table('user_organizations',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('user_organizations_organization_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_organizations_user_id_fkey')),
    sa.PrimaryKeyConstraint('user_id', 'organization_id', name=op.f('user_organizations_pkey'))
    )
    op.drop_table('user_role_assignments', schema='contas')
    op.drop_index(op.f('ix_contas_subscriptions_status'), table_name='subscriptions', schema='contas')
    op.drop_index(op.f('ix_contas_subscriptions_starts_at'), table_name='subscriptions', schema='contas')
    op.drop_index(op.f('ix_contas_subscriptions_plan_id'), table_name='subscriptions', schema='contas')
    op.drop_index(op.f('ix_contas_subscriptions_organization_id'), table_name='subscriptions', schema='contas')
    op.drop_index(op.f('ix_contas_subscriptions_billing_cycle'), table_name='subscriptions', schema='contas')
    op.drop_table('subscriptions', schema='contas')
    op.drop_index(op.f('ix_contas_plan_configurations_plan_id'), table_name='plan_configurations', schema='contas')
    op.drop_index(op.f('ix_contas_plan_configurations_organization_id'), table_name='plan_configurations', schema='contas')
    op.drop_table('plan_configurations', schema='contas')
    op.drop_index('ix_usage_lookup', table_name='feature_usage', schema='contas')
    op.drop_index(op.f('ix_contas_feature_usage_usage_date'), table_name='feature_usage', schema='contas')
    op.drop_index(op.f('ix_contas_feature_usage_resource_type'), table_name='feature_usage', schema='contas')
    op.drop_index(op.f('ix_contas_feature_usage_organization_id'), table_name='feature_usage', schema='contas')
    op.drop_index(op.f('ix_contas_feature_usage_feature_name'), table_name='feature_usage', schema='contas')
    op.drop_table('feature_usage', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_roles_parent_role_id'), table_name='authorization_roles', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_roles_organization_id'), table_name='authorization_roles', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_roles_name'), table_name='authorization_roles', schema='contas')
    op.drop_table('authorization_roles', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_resources_resource_type'), table_name='authorization_resources', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_resources_resource_id'), table_name='authorization_resources', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_resources_owner_id'), table_name='authorization_resources', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_resources_organization_id'), table_name='authorization_resources', schema='contas')
    op.drop_table('authorization_resources', schema='contas')
    op.drop_index('ix_policy_lookup', table_name='authorization_policies', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_policies_resource_type'), table_name='authorization_policies', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_policies_organization_id'), table_name='authorization_policies', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_policies_name'), table_name='authorization_policies', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_policies_effect'), table_name='authorization_policies', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_policies_action'), table_name='authorization_policies', schema='contas')
    op.drop_table('authorization_policies', schema='contas')
    op.drop_index(op.f('ix_contas_plan_resources_resource_type'), table_name='plan_resources', schema='contas')
    op.drop_index(op.f('ix_contas_plan_resources_plan_id'), table_name='plan_resources', schema='contas')
    op.drop_table('plan_resources', schema='contas')
    op.drop_index(op.f('ix_contas_plans_plan_type'), table_name='plans', schema='contas')
    op.drop_index(op.f('ix_contas_plans_name'), table_name='plans', schema='contas')
    op.drop_table('plans', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_permissions_resource_type'), table_name='authorization_permissions', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_permissions_name'), table_name='authorization_permissions', schema='contas')
    op.drop_index(op.f('ix_contas_authorization_permissions_action'), table_name='authorization_permissions', schema='contas')
    op.drop_table('authorization_permissions', schema='contas')
    # ### end Alembic commands ###